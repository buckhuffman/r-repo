srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df[[i]] <- j[[i]][c(1,3)]
}
df
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
df <- list()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
s <- subset(file, !grepl("Not", file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df[[i]] <- j[[i]][srow, c(1,2)]
}
df
}
rankall("heart attack")
rankall("heart failure")
j[["WV"]]
head(j,)
j[[1]]
j[[52]]
j[[53]]
s <- subset (file, !grepl("Not", file[, 17]), select = c(2,7,17), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
head(s)
split_by_state <- split(s, f = s$State)
head(split_by_state)
head(split_by_state,1)
for (i in 1:length(split_by_state)) {
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3]),]
}
j[[1]]
j[[52]]
j[[53]]
split_by_state <- split(s, f = s$State)
file[, 17] <- as.numeric(as.character(file[,17]))
split_by_state <- split(s, f = s$State)
split_by_state[, 3] <- as.numeric(as.character(split_by_state[,3]))
head(split_by_state)
file[, 17] <- as.numeric(as.character(file[,17]))
s <- subset(file, !grepl("Not", file[, 17]), select = c(2,7,17), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
split_by_state <- split(s, f = s$State)
head(split_by_state,1)
s <- subset(file, !is.na(file[, 17]), select = c(2,7,17), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
split_by_state <- split(s, f = s$State)
head(split_by_state,1)
for (i in 1:length(split_by_state)) {
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3]),]
}
head(j[[1]])
j[[53]]
rankall <- function(outcome, num = "best") {
df <- list()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df[[i]] <- j[[i]][srow, c(1,2)]
}
df
}
rankall("heart failure")
tail(rankall("heart failure"))
tail(rankall("heart failure"),10)
j[[53]]
j[[51]]
j[[51]][1,]
tail(rankall("heart failure"),10)
j[[52]][1,]
j[[52]][1:5,]
rankall <- function(outcome, num = "best") {
df <- list()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df[[i]] <- j[[i]][srow, c(1,2)]
}
df
}
j[[52]][1:5,]
tail(rankall("heart failure"),10)
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df <- rbind(j[[i]][srow, c(1,2)])
}
df
}
tail(rankall("heart failure"),10)
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df <- rbind(df, j[[i]][srow, c(1,2)])
}
df
}
tail(rankall("heart failure"),10)
submit()
source("submitscript3.R")
submit()
submit()
X <- rankall("heart failure")
typeof(X)
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- data.frame()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df <- rbind(df, j[[i]][srow, c(1,2)])
}
df
}
X <- rankall("heart failure")
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- data.frame(split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),])
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df <- rbind(df, j[[i]][srow, c(1,2)])
}
df
}
rankall("heart failure")
X <- rankall("heart failure")
typeof(X)
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df <- rbind(df, data.frame(j[[i]][srow, c(1,2)]))
}
df
}
X <- rankall("heart failure")
typeof(X)
X <- data.frame()
typeof(X)
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
df <- rbind(df, data.frame(Hospital.Name=j[[i]][srow, 1], State=j[[i]][srow, 2]))
}
df
}
X <- rankall("heart failure")
typeof(X)
X
X
str(X)
submit()
submit()
submit()
submit()
rankall("pneumonia", "worst")
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
if (srow == "worst") {
df <- rbind(df, data.frame(hospital=j[[i]][nrow(j[[i]]), 1], state=j[[i]][nrow(j[[i]]), 2] ))
} else {
df <- rbind(df, data.frame(hospital=j[[i]][srow, 1], state=j[[i]][srow, 2]))
}
}
df
}
rankall("pneumonia", "worst")
rankall <- function(outcome, num = "best") {
df <- data.frame()
## Read outcome data
file <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")
if (outcome == "heart attack") {
field <- 11
} else if (outcome == "heart failure") {
field <- 17
} else if (outcome == "pneumonia") {
field <- 23
} else {
stop ("invalid outcome")
}
file[,field] <- as.numeric(as.character(file[,field]))
s <- subset(file, !is.na(file[, field]), select = c(2,7,field), drop = TRUE)
colnames(s) <- c("Hospital.Name", "State", "Outcome")
if (num == "best") {
srow <- 1
} else if (num == "worst")  {
srow <- nrow(s)
} else if (!is.integer(num)) {
srow <- num
} else {
stop ("invalid num")
}
## For each state, find the hospital of the given rank
split_by_state <- split(s, f = s$State)
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in 1:length(split_by_state)) {
j <- list()
j[[i]] <- split_by_state[[i]][order(split_by_state[[i]][,3],split_by_state[[i]][,1]),]
##j <- rbind(split_by_state[[i]][order(split_by_state[[i]][,3]),])
if (num == "worst") {
srow <- nrow(j[[i]])
}
df <- rbind(df, data.frame(hospital=j[[i]][srow, 1], state=j[[i]][srow, 2]))
}
df
}
rankall("pneumonia", "worst")
submit()
