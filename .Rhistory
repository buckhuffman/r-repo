?rnorm
help.search("rnorm")
?lm
a <- available.packages()
View(a)
install.packages("slidify")
install.packages("slidify")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("Kern Smooth")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library("swirl")
swirl()
getwd()
setwd("~/GitHub/r-repo")
getwd()
dir()
source ("myfunction.R")
ls()
source ("myfunction.R")
ls()
second("4")
second(4)
second(4)
second(4)
myfunction()
myfunction()
myfunction()
second(4)
second(myfunction())
second(myfunction())
second(myfunction())
second(4:10
)
x <- 1
print(x)
x
msg <- 'hello'
msg
x.length
x
x <- 5
x
x <- 1:20
x
x
y <- c(1.7, "a")
y
y <- c(TRUE, 2)
y <- c(FALSE, 2)
y <- c("a", TRUE)
y <- 0
x <- 0:6
class(x)
as.numeric(x)
class(x)
as.logical(x)
as.character(x)
as.logical(-1)
as.logical(0)
as.logical(1)
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
m
dim(m) <- c(2,5)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- list(1, "a", TRUE, 1 + 4i)
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
is.na(x)
x <- c(1,2,NA, 10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NaN, NA,3)
x
is.na(x)
is.nan(x)
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
rnow(x)
nrow(x)
ncol(x)
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
x <- list(a = 1, b = 2, c = 3)
x
m <- matrix(1:4, nrow = 2, ncol = 2)
m
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[2]
x[1:4]
x[x > "a"]
u <- x > "a"
u
x[u]
x''
x
x <- matrix(1:6, 2 ,3)
x
x[1,2]
x[2,1]
x[1,]
x[,2]
x[1,2, drop = FALSE]
x
x[1, ]
x[1, , drop = FALSE]
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]
]
x[[1]]
x$bar
x[["bar"]]
x["bar"]
$bar
x
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[x(1,3)]
x[c(1,3)]
x$baz
name <- "foo"
x[[name]]
x$name
x$foo
x <- list(a = list(10,12,14), b = c(3.14, 2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
x[[c(2,2)]]
x <- list(aardbark = 1:5)
x$s
x$a
x[["a"]]
x[["a", exact = FALSE]]
x[["aardbark"]]
x[["aa", exact = FALSE]]
x[["b", exact = FALSE]]
x[["aar", exact = FALSE]]
x <- c(1, 2, NA, 4, NA, 5
)
x
bad <- is.na(x)
x[!bad]
bad
x[bad]
x[!bad]
x <- c(1,2,NA,4,NA,5)
y <- c("a","b",NA,"d",NA,"f")
good <- complete.cases(x,y)
good
x[good]
y[good]
x <- 1:4. y <- 6:9
x <- 1:4, y <- 6:9
x <- 1:4; y <- 6:9
x + y
x > 2
x >= 2
y == 8
x * y
x / y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4), 2, 2)
x * y
x
y
x/y
x %*% y
y <- data.frame(a = 1, b = "a")
dput(y)
dput(y, file = "y.R")
new.y <- dget("y.R")
new.y
x <- "foo"
dump(c("x", "y"), file = "data.R")
rm(x,y)
source("data.R")
x
y
rm(new.y)
rm (x,y)
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
rm(x, con)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
z * 2 + 1000
my_div
swirl()
1:20
pi:10
15:!
;
15:1
`:`
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2) times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Buck")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste ("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste("X", "Y", "Z", sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- x(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c ("foo", "bar", "norf")
indentical(vert, vect2)
identical(vert, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c[1:20]
my_vector <- [1:20]
my_vector <- (1:20)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- c(4,5, 1:20)
my_matrix2 <- matrix (data = 1:20, rnow = 4, ncol = 1)
my_matrix2 <- matrix (data = 1:20, rnow = 4, ncol = 1, byrow = FALSE)
my_matrix2 <- matrix (data = 1:20, nrow = 4, ncol = 1, byrow = FALSE)
my_matrix2 <- matrix (data = 1:20, nrow = 4, ncol = 1)
my_matrix2 <- matrix (1:20, nrow = 4, ncol = 1)
my_matrix2 <- matrix (1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c ("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <= data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
my_data
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
colnames(my_data,) <- cnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
indentical('twins', 'twins')
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
?which()
which(ints > 7)
any(ints)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, 6
)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean())
sapply(flag_colors, mean
)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
unique_vals <- lapply(flags, length)
unique_vals <- sapply(flags, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
0
exit()
quit()
